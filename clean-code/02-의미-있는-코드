### 의도를 분명히 밝혀라

좋은 이름을 지으려면 시간이 걸리지만 좋은 이름으로 절약하는 시간이 훨씬 더 많다. 이름이 다음 질문들 '변수의 존재 이유는? 수행 기능은? 사용 방법은?'에 답해야하며 따로 주석이 필요하다면 의도를 분명히 드러내지 못했다는 말이다.

```java
public List<>int[]> getThem() {
  List<int[]> list1 = new ArrayList<int[]>();

  for (int[] x : theList)
    if (x[0] == 4)
      lis1.add(x);
  return list1;
}
```

코드가 하는 일을 짐작하기 어려운 이유는 코드의 단순성이 아니라 코드의 함축성의 문제다. 코드 맥락이 코드 자체에 명시적으로 드러나있지 않다. 

### 그릇된 정보를 피하라

코드에 그릇된 단서를 남겨 코드의 의미를 흐리면 안된다. 널리 쓰이는 의미가 있는 단어를 사용하거나, 서로 흡사한 이름을 사용하지 않도록 주의한다.

### 의미 있게 구분하라

이름이 달라야 한다면 의미도 달라져야 한다.

### 발음하기 쉬운 이름을 사용하라

프로그래밍으 사회 활동이기 때문에 발음하기 어려운 이름은 토론하기도 어렵다.

### 검색하기 쉬운 이름을 사용하라

문자 하나를 사용하는 이름과 상수는 텍스트 코드에서 쉽게 눈에 띄지 않는다. 한 문자를 사용하고자 한다면 간단한 메서드에서 로컬 변수에만 사용하다.

### 인코딩을 피하라

문제 해결에 집중하는 개발자에게 인코딩은 불필요한 정신적 부담이다. 인코딩한 이름은 발음하기 어렵고 오타가 생기기 쉽다.

#### 인터페이스 클래스와 구현 클래스

도형을 생성하는 ABSTRACT FACTORY를 구현한다고 할 때, 팩토리는 인터페이스 클래스고 구현은 구체 클래스에서 한다. 그렇다면 IShapeFactory와 ShapeFactory로 이름지어야 하나? 옛날 코드에서 많이 사용하는 접두어 I는 주의를 흐트리고 과도한 정보를 제공한다. 인터페이스 클래스 이름과 구현 클래스 이름 중 하나를 인코딩해야 한다면 구현 클래스 이름을 인코딩하겠다. 

### 자신의 기억력을 자랑하지 마라

똑똑한 프로그래머와 전문가 프로그래머 사이에서 나타나는 차이점은 전문가 프로그래머는 명료함이 최고라는 사실을 이해한다. 전문가 프로그래머는 자신의 능력을 좋은 방향으로 사용해 남들이 이해하는 코드를 내놓는다.

### 클래스 이름

클래스 이름과 객체 이름은 명사나 명사구가 적합나다. ex. Customer, WikiPage, Account, AddressParser, etc.

### 메서드 이름

메서드 이름은 동사나 동사구가 적합하다. ex. postPayment, deletePage, save, etc.

### 기발한 이름은 피하라

### 한 개념에 한 단어를 사용하라

추상적인 개념 하나에 단어 하나를 선택해 이를 고수한다. 예를 들어 똑같은 메서드를 클래스마다 fetch, retrieve, get과 같이 제각각으로 부르면 혼란스럽다. 일관성 있는 어휘를 사용하자.

### 말장난을 하지 마라

한 단어를 두 가지 목적으로 사용하지 마라. 예를 들어, 지금까지 구현한 add 메서드는 모두가 기존 값 두 개를 더하거나 이어서 새로운 값을 만들 때, 새로 작성하는 메서드는 집합에 값 하나를 추가하는데 이 메서드를 add라 불러도 괜찮을까? 새 메서드는 기존 add와 맥락이 다르기 때문에 다른 이름을 사용해야 한다.

### 해법 영역에서 가져온 이름을 사용하라

프로그래머에게 익숙한 기술 개념에는 기술 이름이 가장 적합한 선택이다.

### 문제 영역에서 가져온 이름을 사용하라

적절한 '프로그래머 용어'가 없다면 문제 영역에서 이름을 가져온다. 이 때는 유지 보수하는 프로그래머가 분야 전문가에게 의미를 물어 파악할 수 있다. 우수한 프로그래머와 설계자라면 해법 영역과 문제 영역을 구분할 줄 알아야한다. 문제 영역 개념과 관련이 깊은 코드라면 문제 영역에서 이름을 가져온다.

### 의미 있는 맥락을 추가하라

### 불필요한 맥락을 없애라

이름에 불필요한 맥락을 추가하지 않도록 주의한다. 

### 마치면서

좋은 이름을 선택하려면 설명 능력이 뛰어나야 하고 문화적인 배경이 같아야 한다.
